import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';

class FloatingAction extends StatefulWidget {
  const FloatingAction({Key? key}) : super(key: key);

  @override
  _FloatingActionState createState() => _FloatingActionState();
}

class _FloatingActionState extends State<FloatingAction> {
  final radius = 25.0;

  var buttonOffset = const Offset(25, 100);
  late Size scrnSize;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    scrnSize = MediaQuery.of(context).size;
  }

  @override
  Widget build(BuildContext context) {
    return IgnorePointer(
      ignoring: true,
      child: Material(
        type: MaterialType.transparency,
        child: Stack(
          children: [
            AnimatedPositioned(
              curve: Curves.ease,
              duration: const Duration(milliseconds: 120),
              // (- radius) is for making the center as pivot
              left: buttonOffset.dx - radius,
              top: buttonOffset.dy - radius,
              child: GestureDetector(
                onVerticalDragUpdate: onDrag,
                onVerticalDragEnd: onDragEnd,
                child: Container(
                  width: radius * 2,
                  height: radius * 2,
                  clipBehavior: Clip.antiAliasWithSaveLayer,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(200),
                    color: Colors.blue,
                  ),
                  child: const Center(
                    child: Text(
                      '+',
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// Checks if the button is off limits -> adjust the position and setState.
  void onDrag(details) {
    var dxNew = details.globalPosition.dx;
    var dyNew = details.globalPosition.dy;

    if (dxNew < radius) dxNew = 25;
    if (dxNew > scrnSize.width - radius) dxNew = scrnSize.width - 25;

    if (dyNew < radius) dyNew = 25;
    if (dyNew > scrnSize.height - radius) dyNew = scrnSize.height - 25;

    setState(() {
      buttonOffset = Offset(dxNew, dyNew);
    });
  }

  /// Checks if the button is not touching any edge -> find ideal edge position -> setState
  void onDragEnd(details) {
    var x = buttonOffset.dx;
    var y = buttonOffset.dy;

    var dx1 = x - radius;
    var dx2 = scrnSize.width - radius - x;
    var dy1 = y - radius;
    var dy2 = scrnSize.height - radius - y;

    var xRatio = min(dx1, dx2) / max(dx1, dx2);
    var yRatio = min(dy1, dy2) / max(dy1, dy2);

    if (yRatio < xRatio) {
      if (dy1 < dy2) {
        setState(() {
          buttonOffset = Offset(x, radius);
        });
      } else {
        setState(() {
          buttonOffset = Offset(x, scrnSize.height - radius);
        });
      }
    } else {
      if (dx1 < dx2) {
        setState(() {
          buttonOffset = Offset(radius, y);
        });
      } else {
        setState(() {
          buttonOffset = Offset(scrnSize.width - radius, y);
        });
      }
    }
  }
}
